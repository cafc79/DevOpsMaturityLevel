using System.Data;

namespace MaturityEvaluation.Entity
{
    public partial class SurveyT2
    {
        public double Origin { get; set; }
        public string Area{ get; set; }

        public string Topic { get; set; }
        public string Adhoc { get; set; }
        public string Repeatable { get; set; }
        public string Consistent { get; set; }
        public string Optimized { get; set; }
        public string Leading { get; set; }



        public SurveyT2(double origin, string categoria, string subcategoria, string adhoc, string repeatable, string consistent, string optimized, string leading)
        {
            Origin = origin;
            Area = categoria;
            Topic = subcategoria;
            Adhoc = adhoc;
            Repeatable = repeatable;
            Consistent = consistent;
            Optimized = optimized;
            Leading = leading;
        }
    }
    public partial class EvaluationT2
    {
        private readonly List<SurveyT2> ST2;

        public EvaluationT2()
        {
            ST2 = new List<SurveyT2>();
            ST2.Add(new SurveyT2(1.1, "Delivery Organization and Methodology", "Release Frequency", "Release scope poorly defined; subject to catastrophic and ad-hoc change requests. Long elapsed period between releases.", "Releases duration exceeds business need; releases face disruptive change", "Release cadences well defined but exceeds business need; Requirements are stable Significant effort expended making sure release scope and requirements are right.", "Release on demand, multi - speed releases; time - box meets to business need(eg: monthly) Multiple release streams depending on nature of change  -major release vs. maint release", "Small changes pushed through the pipeline; Continuous deployment enables innovation – rapid business and operations feedback More than 1 release per month; intra - day releases"));
            ST2.Add(new SurveyT2(1.2, "Delivery Organization and Methodology", "Delivery Organisation", "Ad-Hoc structures focusing on the immediate needs", "Organised in functional silos for design, architecture, development, test and operations", "Organisation is optimised in silos (Delivery Factories, Testing Centers of Excellence,…) with differing incentives", "Organised in silos with aligned incentives and/or organised by platforms", "Organised in persistent cross functional teams aligned to value streams and incentivised for quality and throughput"));
            ST2.Add(new SurveyT2(1.3, "Delivery Organization and Methodology", "Collaboration", "Development and Operations team work in isolation with no interaction", "Highly complex organisation structure with no clear responsibilities.             Teams interact only when a new project is handed off", "Teams collaborate regularly but decisions require approval from multiple parts of the organisation", "Teams collaborate regularly and are empowered to make decisions and act on them", "Small, self-organising and empowered teams meet regularly to optimise the release approach"));
            ST2.Add(new SurveyT2(1.4, "Delivery Organization and Methodology", "Delivery Process & Methodology", "Undefined Methodology", "Waterfall based development", "Following a waterfall/iterative manner", "Delivery is following iterative Agile delivery", "Delivery is based on mature Agile delivery and is continuous"));
            ST2.Add(new SurveyT2(1.5, "Delivery Organization and Methodology", "Metrics & Governance", "Non consistent manual reports, baseline process  metrics. Metrics produced subjectively by PM", "Metrics not well maintained, manually gathered, scheduled status and quality reports", "Metrics capture and generation built into pipeline and ALM tools. Report history available", "Metrics coverage includes delivery performance, in addition to status Metrics used to drive business and improvement decisions", "Real time reporting, automated impact analysis, cross silo analysis Metrics used to drive structured continuous improvement cycle"));
            ST2.Add(new SurveyT2(2.1, "Lean Delivery Governance & Processes", "Governance Approach", "No formal governance process", "Delivery governance based on subjective red/amber/green", "Delivery governance based on traditional Project Management methods (Schedule Performance Index, Cost Performance Index)", "Central Governance based on real-time evidence based delivery outcomes", "Federated Governance based on outcomes"));
            ST2.Add(new SurveyT2(2.2, "Lean Delivery Governance & Processes", "Continuous Improvement", "Ad-hoc fixes for problems", "Root cause analysis performed, personal attribution of error", "Root cause analysis and prevention plan, results of plan not evaluated", "Blame free root cause analysis and prevention plans, results evaluated based on metrics", "Learning organisation focusing on hypothesis driven improvements and optimisation of flow "));
            ST2.Add(new SurveyT2(2.3, "Lean Delivery Governance & Processes", "Product Management", "Product management limited to project deliverables No product roadmap", "Product Management limited to project deliverables Roadmap limited to product defects(application support)", "Product Owner empowered to make decisions on the project roadmap Product capacity controlled by project", "Product Owner empowered to make decisions on the project roadmap Persistent product teams", "Long term roadmap delivered via single sprint releases. Where that is not possible, priorities are set by the business and delivery is controlled by the Product Owner"));
            ST2.Add(new SurveyT2(2.4, "Lean Delivery Governance & Processes", "Delivery and Change Control", "No defined change process OR change process unenforced", "Defined change process to assess impact of change, no integration with delivery mechanism", "Well defined change process that is integrated in delivery mechanism", "Change approval based on outcome of automated quality gates", "Majority of change is standard change delivered via pipeline, Change process is exception"));
            ST2.Add(new SurveyT2(2.5, "Lean Delivery Governance & Processes", "Delivery Process", "Processes have grown naturally and are not consistent across the organisation", "Delivery process well understood and documented, focused on manual inspection", "Delivery process is well understood, document and enforced through manual inspection and numbers of handovers", "Delivery process is based on minimum viable process to achieve the outcome and supported by automation", "Delivery process is instrumented, flow and cycle time is visible in real-time"));
            ST2.Add(new SurveyT2(3.1, "Automated Release of Software", "Source Code Version Control and Traceability", "No central source code repository for code.Developers release binary artefact Code merge ad - hoc", "All code must be in Software Configuration Management.All release can be traced to source code version Code merge managed by central team", "All code and other artefacts must be in Software Configuration Management Developers merge their own code", "Managed branching model – ideally based on promotion pattern(see gitflow model) Extent of branching managed and reported on", "Long - lived branches discouraged – replaced with feature toggling and smaller units of change Trunk based development"));
            ST2.Add(new SurveyT2(3.2, "Automated Release of Software", "Deployment Process", "Mostly manual deployments Consistently breeching deployment windows No defined process / procedure for application deployment. No defined or enforced promotion path", "Deployment semi - automated Deployment process specified in release note, varies depending on environment OR Delta deployments are used", "Deployment fully automated Deployment process will build from installed based product(i.e. is full) Deployment process consistent across all environments", "Deployments are measured and continuously get faster and more reliable Promotion path defined and followed 100 % ", "Zero touch, zero - downtime deployment A - B testing enabled Automatic rollback of failed changes"));
            ST2.Add(new SurveyT2(3.3, "Automated Release of Software", "Deployment Artefact Management", "Deployment artefacts passed to deployment team via email, usb, … Artefacts are created for each environment", "Standardised artefact release process(e.g.a file location) Artefacts require manual parameter update for environments", "Artefact repository tool(e.g.nexus) used for some environments Artefacts are tailored automatically to any environment", "Artefact repository tool used for Dev but there is a separate process for production Artefacts are environment agnostic", "Artefact repository tool (e.g. nexus) accessible from all environments"));
            ST2.Add(new SurveyT2(4.1, "Continuous Integration", "Traceability", "No traceability to requirements", "Manual release notes generation", "All builds can be traced to Software Configuration Management. Release notes generated from tools", "Builds can be traceable to requirements Release notes generated from tools", "Builds traceable to source code and requirements.Test - cases traceable to requirements. Release notes generated from tools"));
            ST2.Add(new SurveyT2(4.2, "Continuous Integration", "Continuous Integration", "Developers work independently and integrate work on an infrequent basis; A release build is assembled at the end of the phase / sprint", "Continuous Integration runs on a regular basis (e.g. weekly) – but does not actively drive the development processes", "Developers integrate changes by checking into trunk on regular basis(daily) Triggered fully automated builds. Developers perform pre - commit checks to validate their changes.", "Automated CI tests provide good coverage of system. Build is typically green – fixing a broken build is priority of team “don’t‘ go home on a broken build”.", "Fully automated builds on every check -in which triggers continuous delivery pipeline if quality gates met Build is typically green – CI tooling automatically reverses the failed change"));
            ST2.Add(new SurveyT2(4.3, "Continuous Integration", "Code Quality and Unit Test", "No static code analysis or automated using testing", "Ad-hoc static code analysis with code quality tool; good unit tests coverage", "Code quality tool runs as part of CI process", "Code quality tool is a quality gate that can fail the build", "Maintaining or improving static code analysis is a quality gate"));
            ST2.Add(new SurveyT2(5.1, "Continuous Delivery Pipelines (Incl. Automated QA)", "Test Strategy", "Ad-hoc manual testing", "Test scripts are defined and executed as part of the release", "Test pyramid is followed (i.e. unit tests > services test > UI tests)", "Test strategy aligned with DevOps methodology and included in the Pipeline. Product rollbacks rare", "Final test phase conducted in production environment with a portion of traffic"));
            ST2. Add(new SurveyT2(5.2, "Continuous Delivery Pipelines (Incl. Automated QA)", "Test Automation", "All manual tests, no automation framework in place", "Some automated unit & regression test; Automation framework is not modularised", "Automated test scripts are used Risk - based manual testing is also required", "All tests automated and run within pipeline – including UAT, performance and security tests", "Tests run as functional monitoring in live estate"));
            ST2.Add(new SurveyT2(5.3, "Continuous Delivery Pipelines (Incl. Automated QA)", "Test Data Management", "Manually creating/mocking up test data", "Tests stubs provide mostly static responses; Test data managed centrally and created-in env.", "Test harnesses used for external systems; Test data managed centrally and can be imported to any environment", "A synchronised data suite used for testing; Tooling able to refresh data back to a known state ", "Test data (and test scripts) version-controlled and released via pipeline."));
            ST2.Add(new SurveyT2(5.4, "Continuous Delivery Pipelines (Incl. Automated QA)", "Deployment Pipelines", "No Deployment Pipelines exist", "Deployment pipelines are used for some environments/steps", "Deployment process is visualised and tracked in pipeline fashion", "Deployment pipelines are consistently used across all environment", "Deployment pipeline includes all phases of the SDLC and automated QA"));
            ST2.Add(new SurveyT2(6.1, "Automated Operations", "Monitoring", "No monitoring tools", "Tools in place, but not configured beyond basic OS checks", "Configured by a tool and role specific checks added", "Environment and application health monitored and proactively managed via multi - stack monitoring solution Business data is monitored to validate delivery hypothesis", "Unified monitoring of all levels: infrastructure, errors, security, performance, functionality, user behaviour and business value Business data is feeding back to Delivery to improve functionality(BizOps)"));
            ST2.Add(new SurveyT2(6.2, "Automated Operations", "Organisational Consideration", "Separate operations / security teams; not involved in design / delivery process KPIs not monitored","Dev and Ops teams interact only during the handover of a project. Limited crossover between processes. Independent KPIs manually monitored","Dedicated DevOps team supporting tooling and environments Independent KPIs automatically monitored","Dedicated DevOps team and all others have common objectives KPIs are aligned and monitored","Fully cross-functional team owning dev and ops accountability KPIs are aligned, monitored and used for experimentation"));
            ST2.Add(new SurveyT2(6.3, "Automated Operations", "Resiliance", "No Disaster Recovery/High Availability available", "Disaster Recovery is manual process", "Automated Disaster Recovery available", "Automated Disaster Recovery available and tested annually", "Automated Disaster Recovery / High Availability available and tested weekly Self - healing is enabled and integrated with monitoring"));
            ST2.Add(new SurveyT2(7.1, "Software Defined Infrastructure & Cloud", "Environment Design & Support", "No clear environment design, ad-hoc environments used", "Majority of lifecycle conducted in environments not representative of production", "Environments have live-like design but are used concurrently by multiple test phases", "Majority of lifecycle conducted in environments that are representative of production", "All environments are representative of production – ideally built using same ‘code’ as production"));
            ST2.Add(new SurveyT2(7.2, "Software Defined Infrastructure & Cloud", "Iinfrastructure Suitability", "Servers created on ad-hoc basis; no defined standards", "Servers created by hand, but to defined standard", "Servers provisioned on demand (e.g. Via a portal)", "Software defined infrastructure (IaaS)", "Software defined, infinitely scalable infrastructure "));
            ST2.Add(new SurveyT2(7.3, "Software Defined Infrastructure & Cloud", "Eenvironment Allocation and Provisioning", "No environments representative of live available", "Constrained or limited number of live-like envs which are maintained over time", "Sufficient live-like envs; environments not a delivery constraint", "Environments are being built automatically from software definition", "Environments are built on demand and destroyed on completion"));
            ST2.Add(new SurveyT2(7.4, "Software Defined Infrastructure & Cloud", "Responsiveness to Volume Increase", "Unexpected high-usage typically causes service outage", "Platform can be throttled to prevent high-usage causing outage", "Platform can be manually scaled Higher - usage is typically anticipated to achieve this.", "Platform detects changes in usage and alerts Ops teams who can scale accordingly", "Platform detects changes in usage and dynamically responds (e.g. auto-scaling)"));
            ST2.Add(new SurveyT2(8.1, "Platform & Application Architecture", "Architecture", "Monolithic or complex custom platform with no automation capabilities", "Platform based on technologies with some degree of automation (console access)", "Platform based on modular & scalable technologies; Configuration in Software Configuration Management & automated","Platform based on modular and scalable technologies; all maintenance automated","Open Source based platform with scalable and fault tolerant architecture (e.g. Microservices)"));
            ST2.Add(new SurveyT2(8.2, "Platform & Application Architecture", "Impact of Component Failure", "Significant business impact with business data loss Numerous Single Point of Failure(SPOFs) have potential to cause full service outage", "Significant business impact but all data preserved SPOFs identified and mitigation strategies are in place(e.g.clustering)", "SPOFs eliminated through application and platform design", "Anti-fragile design: System design to gracefully handle failures without full service loss", "Service seamlessly handles failures, delivering high quality user experience"));
            ST2.Add(new SurveyT2(8.3, "Platform & Application Architecture", "Business Enablement", "All changes (however small) require IT delivery through project release", "All changes require IT delivery – but accelerated route existing for small change", "Business have been empowered to make some high frequency changes directly", "Business empowered with tools to make all low impact changes directly without IT support", "Business empowered to dynamically experiment (A-B) with varying configurations"));
            ST2.Add(new SurveyT2(9.1, "Security", "Security Skills & Organization", "No CISO or poorly defined security teams, ad - hoc governance Security not really a concern, under sole responsibility of either project or security teams without collaboration between them", "Designated security skills and expertise available but not well structured; superficial governance process exists ad-hoc scan capability to be established by project Security acting as a gate keeper, adding constraints; added value unclear","CISO organization in place, security operating model designed as per project needs; security SMEs assigned to support projects but lack of clarity in distribution of roles Scan capability in place, but governed by projects Security acting as support to project team","Fully established CISO organization; skills and expertise clearly defined Security fully integrated into project organization Predefined blueprints and tools available Security as a key project stakeholder","Well placed security skills/ SMEs Full governance in place and efficiently supporting projects Shared services providing expertise, methodology support, tools as a service fully integrated with CI / CD Security as an enabler / accelerator to projects"));
            ST2.Add(new SurveyT2(9.2, "Security", "Strategy & Governance", "Ad-hoc risk assessments Users or events are uncontrolled and reactive", "Enterprise level Risk Assessment in place Complemented by ad - hoc Risk Assessments by project", "Risk assessment consistently applied to every project Remediation plans monitored as governance level Metrics defined and used as a reference", "Risk assessment and security requirements taken as an input to Product Roadmap and Business Case and planned for accordingly Metrics actively monitored and used as a quality gate", "Metrics monitored at portfolio level and used as key measure of progress to drive continuous improvement plans and feed Product Roadmap"));
            ST2.Add(new SurveyT2(9.3, "Security", "Security Design & Architecture", "No existing security guidelines or poorly used secure design principles No data security embedded in design", "Secure design principles defined and available off the shelf for projects to leverage Few are implemented, on a per project basis", "Most secure design principles are in place, captured upfront and considered by design Design reviews with security teams providing early feedback", "Full security by design, design is co - built with security SME contributing directly to design No tools integrated, latest encryption methodologies not fully used", "Secure design principles fully adopted and refreshed with latest Risk Assessments Tools used for secure design; latest data encryption methodologies used"));
            ST2.Add(new SurveyT2(9.4, "Security", "Methodology & Processes", "Undocumented or poorly defined processes for secure development Defined on a per project basis", "Processes are developed but not implemented on a regular basis Enablement through documents but insufficient", "Methodology and processes are followed but needs improvements Security checks defined, scans are repeated at defined time intervals or key milestones", "Security framework fully integrated through SDLC, acceptance criteria defined and validated consistently as part of SDLC", "Well established end-to-end processes, methodologies, and tools"));
            ST2.Add(new SurveyT2(9.5, "Security", "Continuous Security Testing", "ad-hoc security tests on key milestones", "Repeatable security tests executed before every major release or milestone", "Routine plan for all security tests is embedded in the CI/CD pipeline with a set of tools, mainly SAST.", "Various tools are used in the CI/CD pipeline to automate continuous testing with security gates for both SAST/DAST", "Well equipped toolchain for CI / CD process with fully automated gates Remediations automatically added to Product Backlog"));
            ST2.Add(new SurveyT2(9.6, "Security", "Continuous Security Testing", "Mostly manual security testing", "Security tests automated, environment tailoring required, no enterprise tools used for scans", "Automated security testing embedded into environments but needs optimization in the process of scans", "Security plugged-in or built from nothing but programmatically", "Static scan for delta code commit. Dynamic scan in pre-production. Support with IDE plug-ins for developers"));
            ST2.Add(new SurveyT2(9.7, "Security", "Continuous Security Testing", "Scans cannot be traced back to release version or build but results are maintained", "Scan tests and results consistently managed and are mapped to respective build and release but manually", "Scan results tagged to build or release automatically post scans execution using script", "Scan results can be traced back to a release but co-relation from IDE to vulnerability management tool does not exist", "Traceability of  each release code scan, track of remediation and no repeatable issues in scans"));
            ST2.Add(new SurveyT2(9.8, "Security", "Continuous Security Testing", "Vulnerabilities are tracked manually without a tool usage", "Issues are fed into vulnerability management tool manually", "Vulnerabilities are tracked using a management tool with automation", "Vulnerability aggregation tool used with automatic updates in status", "Lifecycle of a vulnerability is tracked with automation in a management tool"));
            ST2.Add(new SurveyT2(9.9, "Security", "Continuous Security Testing", " Security embedding is reason for deviation from project delivery on time", "Both static scans and dynamic scans are creating latency but project plan deviation is accommodative", "Source code analysis is time consuming and creating latency during build time but dynamic scans are not causing any major latency", "Minor latency in release schedule due to security interface layer prior to production release", "No latency involved so zero-downtime deployments"));
            ST2.Add(new SurveyT2(9.10, "Security", "Secure Infrastructure", "Security measures followed and tests implemented but on ad-hoc basis for infrastructure and cloud services", "Some security tests are repeated as required but no thorough implementation", "PROD environments are secured, but DEV / TEST environments are not maintained at the same level Security standards followed and tests implemented but needs optimization", "Repository of approved images available for consistent use to provision any environment Periodic security tests done both on infra and cloud services but need alignment with New IT strategy", "Security compliance checks are fully automated and executed continuously on all environments"));
            ST2.Add(new SurveyT2(9.11, "Security", "Secure Operations", "Ad-hoc security monitoring in place. Executed only when issue arises", "Few security practices and tools in place for monitoring, but not fully integrated in production environment.", "Security monitoring is in place but mostly manual, mostly in production environment", "Security parameters are regularly monitored in real time for all environments and proactively managed but not fully integrated with automation", "SOC fully in place Security scans automation in end to end process of CI / CD.Measure of automation level is also available"));
        }

        public SurveyT2 GetNext(int bOrigen, string? cTransition)
        {
            if (bOrigen == 0)
            {
                var s = (from st in ST2 where st.Origin.Equals(bOrigen) select st);
                return s.FirstOrDefault();
            }

            else
            {
                var s = (from st in ST2 where st.Origin.Equals(bOrigen) select st);
                return s.FirstOrDefault();
            }
        }
    }
}
